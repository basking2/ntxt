#!/usr/bin/ruby

require 'rubygems'
require 'optparse'
require 'ntxt'
require 'yaml'

$configs = {
  :cmd => 'tag',
  :tag_string => '',
  :editor => 'vim',
  :filename => "#{ENV['HOME']}/notes.txt"
}

DEFAULT_CONFIG_FILE="#{ENV['HOME']}/.ntxtrc"

# Create or load a configuration file.
if File.exists?(DEFAULT_CONFIG_FILE)
  File.open(DEFAULT_CONFIG_FILE) do |io|
    $configs.merge!(YAML::load(io))
  end
else
  File.open(DEFAULT_CONFIG_FILE, 'w') do |io|
    YAML::dump($configs, io)
  end
end

OptionParser.new do |opt|
  opt.version="1.0.5"

  opt.on('--trace', 'Trace through the file printing summaries.' ) do |v|
    $configs[:cmd] = 'trace'
  end
  
  opt.on('-p','--print', 'Print the whole file one block at a time.' ) do |v|
    $configs[:cmd] = 'print'
  end

  opt.on('-e','--edit', 'Edit using $NTXT_EDITOR or $EDITOR.' ) do |v|
    $configs[:cmd] = 'edit'
  end

  opt.on('-T', '--print_tags', 'Print all tags in the document.') do |v|
    $configs[:cmd] = 'print_tags'
  end
    
  opt.on('-t', '--tag=String', 'Search and print the give so-tagged blocks.') do |v|
    $configs[:cmd] = 'tag'
    $configs[:tag_string] = v
  end
  
  opt.on('-l', '--last=[Integer]', 
    'Show the last n top-level blocks. Default is 1') do |v|
    $configs[:cmd] = 'last'
    $configs[:last] = (v.nil?)? 1 : v.to_i
  end
      
  opt.on('-s','--search=String', 'Search the text for.' ) do |v|
    $configs[:cmd] = 'search'
    $configs[:search_string] = v
  end
end.parse! ARGV

if ARGV.length > 0
  $configs[:filename] = ARGV.shift
end

# Remove empty lines from blocks and print. Guards against nils and empty lines.
def printNonEmpty(txt)
  if txt
    txt = txt.gsub(/^\s*$/m, '')
    print txt, "\n" if txt.length > 0
  end
end

$configs[:tag_string] = ARGV.shift if ARGV.length > 0

begin
  ntxt = File.open($configs[:filename]) { |io| Ntxt::Ntxt.new(io.read) }
rescue Errno::ENOENT => e
  puts "The file #{$configs[:filename]} was not found. Exiting."
  exit 1
end

case $configs[:cmd]
when 'print_tags'
  # Notice that we are re-wrapping the tags back into square brackets.
  puts "[#{ntxt.rootBlock.tags.keys.sort.join('] [')}]"
when 'tag'
  ntxt.walkText(
    lambda { |txt, depth, block|
      printNonEmpty txt if block.tags.keys.sort.join(', ').index( $configs[:tag_string])},
    lambda { |depth, block| },
    lambda { |depth, block| } )
when 'search'
  ntxt.walkText(
    lambda { |txt, depth, block|
      printNonEmpty txt if txt && txt.index( $configs[:search_string])},
    lambda { |depth, block| },
    lambda { |depth, block| } )
when 'print'
  ntxt.walkText(
    lambda { |txt, depth, block| print txt },
    lambda { |depth, block| },
    lambda { |depth, block| } )
when 'last'
  ntxt.rootBlock.children[-$configs[:last].. -1].each do |blk|
    puts blk.text
  end
when 'edit'
  editor = ENV['NTXT_EDITOR'] || ENV['EDITOR']

  if editor.nil?
    puts "Environment variable NTXT_EDITOR and EDITOR are not defined."
  else
    system("#{editor} \"#{$configs[:filename]}\"")
  end

when 'trace'
  ntxt.walkText(
    lambda { |txt, depth, block| print txt },
    lambda { |depth, block| 
      puts "-----> #{depth} #{block.tags.keys.sort.join(',')}" },
    lambda { |depth, block| 
      puts "<----- #{depth} " } )
when ''
  # nop
when nil
  # nop
else
  puts "Command #{$configs[:cmd]} not found."
end
